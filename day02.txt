리플렉션이란? 리플렉션은 컴파일러를 무시하고 런타임 상황에서 메모리에 올라간 클래스나 메서드등의 정의를 동적으로 찾아서 조작할 수 있는 일련의 행위를 말합니다. 즉 동적인 언어의 특징이라 말 할 수 있습니다. 프레임워크에서 유연성이 있는 동작을 위해 자주 사용하기도 합니다.
JDBC: Java Data Base Connection의 약자, JAVA 언어를 통해 데이터 베이스에 접근 할 수 있는 프로그래밍
Request 전송방식? 
Get 방식 : 클라이언트에서 서버로 데이터를 전달할 때 URL의 쿼리문자열에 데이터를 같이 전달하는 방식으로 데이터 길이에 제한이 있고, 보안에 취약. 
POST 방식 : 헤더에 데이터를 넣어 보내기 때문에 보안에 조금 더 유리하고 데이터 길이에 제한이 없다. 하지만, Get에 비해 다소 느리다. 서버로 보내기 전에 인코딩하고 전송 후 서버에서는 다시 디코딩 작업을 한다. 
DELETE 방식 : RESTFUL에서 삭제 기능을 할 때 주로 사용된다.
PUT/PUSH 방식 : RESTFUL에서 수정 작업을 할 때 주로 사용된다.
RESTFUL이란? 해당 URL만 보더라도 바로 어떤 작업을 하는지를 알 수 있도록 하나의 데이터는 하나의 URL을 갖도록 작업하는 방식(이거에 대한 예시 찾아보기)
Get과 Post 차이점 
- Get은 주로 웹 브라우저가 웹 서버에 데이터를 요청할 때 사용 
- Post는 웹 브라우저가 웹 서버에 데이터를 전달하기 위해 사용. 
- Get을 사용하면 웹 브라우저에서 웹 서버로 전달되는 데이터가 인코딩되어 URL에 붙는다. 
- Post방식은 전달되는 데이터가 보이지 않는다.
- Get방식은 전달되는 데이터가 255개의 문자를 초과하면 문제가 발생할 수 있다. 
- 웹서버에 많은 데이터를 전달하기 위해서는 Post 방식을 사용하는 것이 바람직하다.


MVC 패턴?
Model: data 처리와 접근, 
View: 사용자에게 보여지는 화면 / 사용자 인터페이스 내의 구성요소들을 표현 
Controller: model과 viw를 제어
특징? 애플리케이션을 MODEL, VIEW, CONTROLLER 세 영역으로 구분하여 영역 간의 결합도를 최소화한 논리적인 패턴.
비즈니스 로직과 프레젠테이션 로직이 분리됨
디자이너와 개발자의 영역이 분리되어 작업의 분업화 가능
유지보수 용이

Static ? 클래스가 로딩될 때 메모리 공간을 할당하는데 처음 설정된 메모리 공간이 변하지 않음(객체를 아무리 많이 만들어도 해당 변수는 하나만 존재) (좀 더 찾아보기)

컬렉션 프레임워크(나중에 좀 더 정리해서 찾아보기)
List 인터페이스? 배열과 유사. 길이는 가변적이며 중복된 데이터를 허용하고 순서 존재함

디자인 패턴? 
-	싱글톤(SingleTone Pattern) : 대표적으로 Calendar 객체나 dataSource 객체처럼 객체가 하나만 생성되어야 하는 경우 전체 코드에서 하나의 객체만 존재할 수 있도록 이미 생성된 객체가 있으면 그 객체를 사용하도록 하는 방식입니다. 
-	팩토리 패턴(Factory pattern) : 객체간 의존성을 줄이기 위해 객체의 생성과 데이터 주입만 담당하는 Factory Class를 정의하고 개발 코드 부분에서는 생성된 객체를 가져다 사용함으로서 의존성을 줄이는 방식입니다. 
-	옵저버 패턴(Observer Pattern) : 기후 정보처럼 RSS 수신시 하나의 객체가 변하면 다른 객체에 객체가 변했다는 사항을 알려주어야 할 경우에 주로 사용됩니다.
프레임워크
-특정 형태의 소프트웨어 문제를 해결하기 위해 상호협력하는 클래스프레임과 인터프레스 프레임의 집합
-특정한 틀을 만들고 거기에 살을 붙인 뒤 프로그램을 만들어 작업시간을 줄임
-특정개념들의 추상화를 제공하는 여러 클래스나 컴포넌트로 구성됨
프레임워크가 가져야 할 특징
개발자들이 따라야 할 가이드라인을 가짐. 개발할 수 있는 범위가 정해져있으며 개발자를 위한 다양한 도구들이 지원됨.
Garbage Collection(가비지컬렉션)? 
메모리 관리방법. 프로그래머가 동적으로 할당한 메모리 영역 중 더 이상 쓰이지 않는 영역을 JVM이 자동으로 찾아내어 해제하는 기능. 
Wrapper Class 사용 이유? 기본 data 타입은 객체가 아니어서 Object로 받는 다형성을 지원할 수 없음. 하지만 메서드에서 실제로 기본데이터 타입을 다형성으로 넘겨주어야 하는 경우가 빈번히 발생하는데 이때 기본 데이터 타입을 객체로 변환시킨다
